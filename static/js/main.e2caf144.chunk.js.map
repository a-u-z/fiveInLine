{"version":3,"sources":["Unit.jsx","components.jsx","App.js","index.js"],"names":["Square","styled","div","props","y","x","ChessHover","Chess","chessColor","Unit","addChess","board","nextColor","historyData","steps","i","length","onClick","style","color","fontSize","textAlign","Row","Wrapper","Navbar","Title","OtherInformation","RestartButton","button","winner","ChessBoard","WinnerMetal","HistoryArea","HistoryBlackArea","HistoryWhiteArea","Steps","HistoryTitle","BlackTurn","WhiteTurn","HintArea","useState","React","useEffect","App","Array","fill","setBoard","currentY","setCurrentY","currentX","setCurrentX","setWinner","setHistoryData","setSteps","newBoard","JSON","parse","stringify","prev","direction","right","left","up","down","leftUp","rightDown","rightUp","leftDown","countSame","yDirection","xDirection","willCheckX","willCheckY","checkColor","counter","goBack","data","window","location","reload","splice","className","map","row","noUse","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e2caf144.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Square = styled.div`\r\n  border: 1px solid black;\r\n  position: relative;\r\n  height: 34px;\r\n  width: 34px;\r\n  margin: 0px;\r\n  padding: 0;\r\n  background: none;\r\n\r\n  ${props => props.y === 0 && `border-top:2px solid black;`} // 修正線太細\r\n  ${props => props.x === 0 && `border-left:2px solid black;`} // 修正線太細\r\n\r\n  ${props => props.y === 17 && `border-bottom:2px solid black;`} // 修正線太細\r\n  ${props => props.x === 17 && `border-right:2px solid black;`} // 修正線太細\r\n\r\n  ${props =>\r\n    props.y === 18 &&\r\n    `border:none;margin-left:2px;`} // 修正多出來的一格，不讓它顯示，修正棋子偏移\r\n  ${props => props.x === 18 && `border:none;`} // 修正多出來的一格，不讓它顯示\r\n`;\r\nconst ChessHover = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  top: -55%;\r\n  left: -55%;\r\n  z-index: 1;\r\n  &:hover {\r\n    background: radial-gradient(#ffff00, rgba(0, 0, 0, 0));\r\n    cursor: pointer;\r\n  }\r\n`;\r\nconst Chess = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  border-radius: 50%;\r\n  top: -58%;\r\n  left: -58%;\r\n  z-index: 1;\r\n  display: flex;\r\n  justify-content: center;\r\n  ${props =>\r\n    props.chessColor === 'black' &&\r\n    `background: black;animation: fadeInBlack ease-in-out 0.3s;\r\n    border: black solid 2px;transform: scale(0.8);`}\r\n  ${props =>\r\n    props.chessColor === 'white' &&\r\n    `background: white;animation: fadeInWhite ease-in-out 0.3s;\r\n    border: black solid 2px;transform: scale(0.8);`}\r\n  @keyframes fadeInBlack {\r\n    0% {\r\n      opacity: 0%;\r\n    }\r\n    50% {\r\n      background: black;\r\n      transform: scale(1.2);\r\n    }\r\n    100% {\r\n      opacity: 100%;\r\n    }\r\n  }\r\n  @keyframes fadeInWhite {\r\n    0% {\r\n      opacity: 0%;\r\n    }\r\n    50% {\r\n      background: white;\r\n      transform: scale(1.2);\r\n    }\r\n    100% {\r\n      opacity: 100%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport default function Unit(props) {\r\n  const { y, x, addChess, board, nextColor, historyData } = props; // 獲取從 map 弄出來的 y x 傳過來這邊\r\n  const chessColor = board[y][x];\r\n  let steps = 0;\r\n  for (let i = 0; i < historyData.length; i++) {\r\n    if (y === historyData[i][1][0] && x === historyData[i][1][1]) {\r\n      steps = historyData[i][0];\r\n    }\r\n  }\r\n  // 因為 board 上面記錄的是 white black， board[y][x] 可以取出是哪個顏色的字串，傳入 Chess render 顏色\r\n  return (\r\n    <>\r\n      <Square\r\n        x={x}\r\n        y={y}\r\n        onClick={() => {\r\n          addChess(y, x, nextColor);\r\n        }}\r\n      >\r\n        <Chess chessColor={chessColor} steps={steps}>\r\n          {steps ? (\r\n            chessColor === 'black' ? (\r\n              <span\r\n                style={{\r\n                  color: 'white',\r\n                  fontSize: '27px',\r\n                  textAlign: 'center',\r\n                }}\r\n              >\r\n                {steps}\r\n              </span>\r\n            ) : (\r\n              <span\r\n                style={{\r\n                  color: 'black',\r\n                  fontSize: '27px',\r\n                  textAlign: 'center',\r\n                }}\r\n              >\r\n                {steps}\r\n              </span>\r\n            )\r\n          ) : null}\r\n        </Chess>\r\n        <ChessHover></ChessHover>\r\n      </Square>\r\n    </>\r\n  );\r\n}\r\n","import styled from 'styled-components';\n\nconst Row = styled.div`\n  clear: both;\n  content: '';\n  display: flex;\n  margin: 0 auto;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\nconst Navbar = styled.div`\n  margin-left: 50px;\n  margin-top: 50px;\n  display: flex;\n  flex-direction: column;\n`;\nconst Title = styled.div`\n  display: flex;\n  justify-content: center;\n  font-size: 80px;\n  color: black;\n`;\nconst OtherInformation = styled.div`\n  display: flex;\n  font-size: 35px;\n  margin-top: 20px;\n  justify-content: space-around;\n`;\nconst RestartButton = styled.button`\n  width: 480px;\n  color: white;\n  font-size: 23px;\n  padding: 6px;\n  background: #fc6586;\n  border-radius: 10px;\n  border: #fc3251 solid 2px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  cursor: pointer;\n  display: flex;\n  display: none;\n  justify-content: center;\n  ${props => props.winner && 'display:flex'}\n`;\n\nconst ChessBoard = styled.div`\n  position: relative;\n  margin-top: 19px;\n  width: 690px;\n  margin-left: 150px;\n  border: 2px solid black;\n  padding-top: 38px;\n  padding-left: 38px;\n  ${(\n    props // shake1 shake2 是因為如果是同一個名字的話，只會觸發第一次而已\n  ) => props.nextColor === 'white' && `animation: shake1 100ms ease-in-out;`}\n  ${props =>\n    props.nextColor === 'black' && `animation: shake2 100ms ease-in-out;`}\n  @keyframes shake1 {\n    0% {\n    }\n    50% {\n      transform: scale(0.995);\n    }\n    100% {\n    }\n  }\n  @keyframes shake2 {\n    0% {\n    }\n    50% {\n      transform: scale(0.996);\n    }\n    100% {\n    }\n  }\n  ${props =>\n    props.winner &&\n    `&::after {\n    content:'';\n    display:block;\n    width:100%;\n    height:100%;\n    background-color: rgba(252,101,134,0.35);\n    position:absolute;\n    top:0;\n    left:0;\n    z-index:2;\n  }`}\n`;\nconst WinnerMetal = styled.div`\n  ${props =>\n    props.winner &&\n    `color: black;\nfont-size: 40px;\nwidth:460px;\ntext-align:center;\nborder: solid #fc3251 4px;\nborder-radius: 20px;\npadding: 10px;\nanimation: metalPop ease-in-out 800ms;\n\n`}\n  @keyframes metalPop {\n    10%,\n    90% {\n      transform: scale(1.1);\n    }\n    20%,\n    80% {\n      transform: translate3d(+2px, 0, 0);\n    }\n    30%,\n    70% {\n      transform: scale(1.25);\n    }\n    40%,\n    60% {\n      transform: translate3d(+2px, 0, 0);\n    }\n    50% {\n      transform: scale(1.3);\n    }\n  }\n`;\nconst HistoryArea = styled.div`\n  display: flex;\n  justify-content: space-around;\n  width: 490px;\n  height: auto;\n  margin-top: 20px;\n`;\nconst HistoryBlackArea = styled.div`\n  border: 5px solid transparent;\n  border-radius: 10px;\n  padding-top: 20px;\n  color: white;\n  background: black;\n  width: 200px;\n  height: 300px;\n  overflow-y: scroll;\n  text-align: center;\n  ${props =>\n    props.steps % 2 === 1 &&\n    `border: #fc6586 5px solid;\n    `}\n`;\nconst HistoryWhiteArea = styled.div`\n  border: 5px solid transparent;\n  border-radius: 10px;\n  padding-top: 20px;\n  background: white;\n  width: 200px;\n  height: 300px;\n  overflow-y: scroll;\n  text-align: center;\n  ${props =>\n    props.steps % 2 === 0 &&\n    `border: #fc6586 5px solid;\n    `}\n`;\nconst Steps = styled.div`\n  ${props =>\n    props.color === 'black' &&\n    `\n      color: black;\n      cursor: pointer;\n      margin-top:10px;\n      `}\n  ${props =>\n    props.color === 'white' &&\n    `\n      color: white;\n      cursor: pointer;\n      margin-top:10px;\n      `}\n`;\nconst HistoryTitle = styled.div`\n  width: 140px;\n  margin-left: auto;\n  margin-right: auto;\n  padding-bottom: 8px;\n  ${props => props.color === 'white' && `border-bottom:solid white 2px`}\n  ${props => props.color === 'black' && `border-bottom:solid black 2px`}\n`;\nconst BlackTurn = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  width: 200px;\n  height: 50px;\n  border: #fc6586 4px solid;\n  border-radius: 15px;\n  ${props => props.steps % 2 === 0 && `visibility:hidden;`};\n  ${props => props.winner && `display:none;`};\n`;\nconst WhiteTurn = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 30px;\n  width: 200px;\n  height: 50px;\n  border: #fc6586 4px solid;\n  border-radius: 15px;\n  ${props => props.steps % 2 === 1 && `visibility:hidden;`}\n  ${props => props.winner && `display:none;`};\n`;\nconst HintArea = styled.div`\n  width: 450px;\n  box-sizing: border-box;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  padding-left: 25px;\n  padding-right: 25px;\n  letter-spacing: 2px;\n  font-size: 25px;\n  ${props => props.winner && 'display:none'}\n`;\nexport {\n  Row,\n  Wrapper,\n  Navbar,\n  Title,\n  OtherInformation,\n  RestartButton,\n  ChessBoard,\n  WinnerMetal,\n  HistoryArea,\n  HistoryBlackArea,\n  HistoryWhiteArea,\n  Steps,\n  HistoryTitle,\n  BlackTurn,\n  WhiteTurn,\n  HintArea,\n};\n","import React from 'react';\nimport Unit from './Unit';\nimport {\n  Row,\n  Wrapper,\n  Navbar,\n  Title,\n  OtherInformation,\n  RestartButton,\n  ChessBoard,\n  WinnerMetal,\n  HistoryArea,\n  HistoryBlackArea,\n  HistoryWhiteArea,\n  Steps,\n  HistoryTitle,\n  BlackTurn,\n  WhiteTurn,\n  HintArea,\n} from './components';\nconst { useState, useEffect } = React;\n\nfunction App() {\n  const SIZE = 19;\n  const [board, setBoard] = useState(Array(SIZE).fill(Array(SIZE).fill(null))); // 設置棋盤\n  const [currentY, setCurrentY] = useState(0); // 當前或是下一手的位置\n  const [currentX, setCurrentX] = useState(0); // 當前或是下一手的位置\n  const [winner, setWinner] = useState('');\n  const [historyData, setHistoryData] = useState([]);\n  const [steps, setSteps] = useState(1);\n  const addChess = (y, x) => {\n    if (board[y][x] !== null) return;\n    const newBoard = JSON.parse(JSON.stringify(board)); // array.fill([1,2]) 的話，裡面的陣列會是同一個，指向同一個記憶體的，所以 === 的話會是 true ，因此必須使用「深拷貝」，也就是`JSON.pare(JSON.stringify(array))`才可以\n    setCurrentY(y);\n    setCurrentX(x);\n    if (steps % 2) {\n      newBoard[y][x] = 'black';\n    } else {\n      newBoard[y][x] = 'white';\n    }\n    setHistoryData(prev => {\n      return [...prev, [steps, [y, x], JSON.parse(JSON.stringify(newBoard))]];\n    });\n    setSteps(steps + 1);\n    setBoard(newBoard);\n  };\n  function checkWinneer() {\n    if (\n      countSame(direction.right) + countSame(direction.left) === 4 ||\n      countSame(direction.up) + countSame(direction.down) === 4 ||\n      countSame(direction.leftUp) + countSame(direction.rightDown) === 4 ||\n      countSame(direction.rightUp) + countSame(direction.leftDown) === 4\n    ) {\n      setWinner(steps % 2 ? '白棋' : '黑棋');\n    }\n  }\n  const direction = {\n    right: [0, 1],\n    left: [0, -1],\n    up: [-1, 0],\n    down: [1, 0],\n    leftUp: [-1, -1],\n    rightDown: [1, 1],\n    rightUp: [-1, 1],\n    leftDown: [1, -1],\n  };\n  function countSame(direction) {\n    const [yDirection, xDirection] = direction; // yDirection, xDirection 是要檢查的方向\n    let willCheckX = currentX + xDirection; // currentX 是拿來定位剛剛下在哪裡的\n    let willCheckY = currentY + yDirection; // currentY 是拿來定位剛剛下在哪裡的\n    let checkColor = null; // checkColor 是上一手的顏色， nextColor 是正在思考要下哪裡的顏色\n    let counter = 0; // 看有幾個相同\n    steps % 2 ? (checkColor = 'white') : (checkColor = 'black'); // 設定 checkColor\n    while (\n      willCheckX >= 0 &&\n      willCheckY >= 0 &&\n      willCheckX < 19 &&\n      willCheckY < 19\n    ) {\n      if (board[willCheckY][willCheckX] === checkColor) {\n        // 被檢查的顏色，和上一手相同那就計數器＋＋\n        counter++; // 這個方向已經找到一個相同的了，就繼續找看還有沒有相同的\n        willCheckX = willCheckX + xDirection; // 設定下一次的要搜尋的 x\n        willCheckY = willCheckY + yDirection; // 設定下一次的要搜尋的 y\n      } else {\n        // 如果不是相同的，那就沒有必要找下去，終止這個 while loop\n        break; // 退出循環\n      }\n    }\n    return counter; // 回傳「這個方向」總共數到幾個相同的棋子\n  }\n  function handleRestartClick() {\n    setCurrentY(0);\n    setCurrentX(0);\n    setWinner('');\n    setHistoryData([]);\n    setSteps(1);\n    setBoard(Array(SIZE).fill(Array(SIZE).fill(null)));\n  }\n  useEffect(() => {\n    checkWinneer();\n    // eslint-disable-next-line\n  }, [steps]);\n  function goBack(data) {\n    if (winner) return; // 判斷出勝負後，就封鎖此功能\n    if (data[0] === 1) window.location.reload(); // 如果點擊第一步的話，那就重新整理，整盤重來\n    setBoard(historyData[data[0] - 2][2]);\n    setSteps(data[0]);\n    setHistoryData(prev => {\n      prev.splice(data[0] - 1, prev.length);\n      return prev;\n    });\n  }\n  return (\n    <div className=\"App\">\n      <Wrapper>\n        <ChessBoard winner={winner}>\n          {board.map((row, y) => {\n            return (\n              <Row key={y} y={y}>\n                {row.map((noUse, x) => {\n                  return (\n                    <Unit\n                      key={x}\n                      y={y}\n                      x={x}\n                      addChess={addChess}\n                      board={board}\n                      historyData={historyData}\n                    />\n                  );\n                })}\n              </Row>\n            );\n          })}\n        </ChessBoard>\n        <Navbar>\n          <Title>超級五子棋</Title>\n          <OtherInformation>\n            <BlackTurn winner={winner} steps={steps}>\n              黑棋，換你～\n            </BlackTurn>\n            <WhiteTurn winner={winner} steps={steps}>\n              白棋，換你～\n            </WhiteTurn>\n          </OtherInformation>\n          <WinnerMetal winner={winner}>\n            {winner ? `恭喜${winner}獲勝🎊🎉🥳這是一盤精采的對戰` : ``}\n          </WinnerMetal>\n          <RestartButton winner={winner} onClick={handleRestartClick}>\n            不算啦！重來一次，下一盤我一定要贏你～\n          </RestartButton>\n          <HistoryArea>\n            <HistoryBlackArea color=\"black\" steps={steps}>\n              <HistoryTitle color=\"white\">黑棋區</HistoryTitle>\n              {historyData.map((data, index) => {\n                if (index % 2 === 0) {\n                  return (\n                    <Steps\n                      color=\"white\"\n                      key={data[0]}\n                      onClick={() => goBack(data)}\n                    >\n                      第 {index + 1} 步\n                    </Steps>\n                  );\n                }\n              })}\n            </HistoryBlackArea>\n            <HistoryWhiteArea color=\"white\" steps={steps}>\n              <HistoryTitle color=\"black\">白棋區</HistoryTitle>\n              {historyData.map((data, index) => {\n                if (index % 2 === 1) {\n                  return (\n                    <Steps\n                      color=\"black\"\n                      key={data[0]}\n                      onClick={() => goBack(data)}\n                    >\n                      第 {index + 1} 步\n                    </Steps>\n                  );\n                }\n              })}\n            </HistoryWhiteArea>\n          </HistoryArea>\n          <HintArea winner={winner}>H i n t :</HintArea>\n          <HintArea winner={winner}>\n            可以點擊黑棋區或是白棋區當中的第 n 步，即可重新決定該步的落子位置\n          </HintArea>\n        </Navbar>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}